<?php
// Setup the path to the thrift library folder
$GLOBALS['THRIFT_ROOT'] = 'thrift'; 

// Load up all the thrift stuff
require_once $GLOBALS['THRIFT_ROOT'].'/Transport/TTransport.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/Transport/TSocket.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/Protocol/TProtocol.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/Protocol/TBinaryProtocol.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/Transport/TBufferedTransport.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/Type/TMessageType.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/Factory/TStringFuncFactory.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/StringFunc/TStringFunc.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/StringFunc/Core.php';  
require_once $GLOBALS['THRIFT_ROOT'].'/Type/TType.php';  
use Thrift\Protocol\TBinaryProtocol;  
use Thrift\Transport\TSocket;  
use Thrift\Transport\TSocketPool;  
use Thrift\Transport\TFramedTransport;  
use Thrift\Transport\TBufferedTransport; 
use Thrift\Exception\TTransportException; 

// Load RebadDB thrift autogenerated files
require_once $GLOBALS['THRIFT_ROOT'].'/packages/rebat/Types.php';
require_once $GLOBALS['THRIFT_ROOT'].'/packages/rebat/RebatDB.php';

// Load Relations
require_once 'Relations.php';

if ( ! class_exists("RebatDriver"))
{
  class RebatDriver
  {
    private $client;
    private $transport;
    private $socket;
    private $portocol;
    private $queryList;

    function __construct($server = 'localhost', $port = '2011')
    {
      // Create a thrift connection
      $this->socket = new TSocket($server, $port);
      $this->transport = new TBufferedTransport($this->socket);
      $this->protocol = new TBinaryProtocol($this->transport);

      // Create a RebadDB client
      $this->client = new rebat\RebatDBClient($this->protocol);

      // Initialize quaeryList
      $this->queryList = array();
    }

    public function add($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $weight, $relation_key)
    {
      // Create new Edge
      $edge = new rebat\Edge();

      // Fill Edge data
      $edge->fromEntityId = $from_entity_id;
      $edge->fromEntityType = $from_entity_type;
      $edge->toEntityId = $to_entity_id;
      $edge->toEntityType = $to_entity_type;
      $edge->weight = $weight;
      $edge->relationId = $relation_key;

      // Open thrift connection
      $this->transport->open();

      // Call addQuery on Rebat server
      $result = $this->client->addQuery($edge);

      // Close thrift connection
      $this->transport->close();

      // return result
      return $result;
    }

    public function updateWeight($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_key, $new_weight)
    {
      // Create new Edge
      $edge = new rebat\Edge();

      // Fill Edge data
      $edge->fromEntityId = $from_entity_id;
      $edge->fromEntityType = $from_entity_type;
      $edge->toEntityId = $to_entity_id;
      $edge->toEntityType = $to_entity_type;
      $edge->relationId = $relation_key;

      // Open thrift connection
      $this->transport->open();

      // Call updateWeightQuery on Rebat server
      $result = $this->client->updateWeightQuery($edge, $new_weight);

      // Close thrift connection
      $this->transport->close();

      // return result
      return $result;
    }

    public function delete($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_key)
    {
      // Create new Edge
      $edge = new rebat\Edge();

      // Fill Edge data
      $edge->fromEntityId = $from_entity_id;
      $edge->fromEntityType = $from_entity_type;
      $edge->toEntityId = $to_entity_id;
      $edge->toEntityType = $to_entity_type;
      $edge->relationId = $relation_key;

      // Open thrift connection
      $this->transport->open();

      // Call deleteQuery on Rebat server
      $result = $this->client->deleteQuery($edge);

      // Close thrift connection
      $this->transport->close();

      // return result
      return $result;
    }

    public function truncate()
    {
      // Open thrift connection
      $this->transport->open();

      // Call truncate on Rebat server
      $result = $this->client->truncate();

      // Close thrift connection
      $this->transport->close();

      // return result
      return $result;
    }

    public function where($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id)
    {
      array_push($this->queryList, $this->create_query($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id, rebat\QueryType::WHERE));
    }

    public function union($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id)
    {
      array_push($this->queryList, $this->create_query($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id, rebat\QueryType::UNION));
    }

    public function intersect($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id)
    {
      array_push($this->queryList, $this->create_query($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id, rebat\QueryType::INTERSECT));
    }

    public function exclude($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id)
    {
      array_push($this->queryList, $this->create_query($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id, rebat\QueryType::NOT));
    }

    public function entries()
    {
      // Open thrift connection
      $this->transport->open();

      // Call selectQuery on Rebat server
      $result = $this->client->selectQuery($this->queryList);

      // Close thrift connection
      $this->transport->close();

      // return result
      return $result;
    }

    private function create_query($from_entity_id, $from_entity_type, $to_entity_id, $to_entity_type, $relation_id, $qtype)
    {
      // Create new Edge
      $edge = new rebat\Edge();

      // Fill Edge data
      if ($from_entity_id != "")
        $edge->fromEntityId = $from_entity_id;
      
      if ($from_entity_type != "")
        $edge->fromEntityType = $from_entity_type;
      
      if ($to_entity_id != "")
        $edge->toEntityId = $to_entity_id;
      
      if ($to_entity_type != "")
        $edge->toEntityType = $to_entity_type;
      
      if ($relation_id != "")
        $edge->relationId = $relation_id;

      $query = new rebat\Query();

      // Fill query data
      $query->edge = $edge;
      $query->qtype = $qtype;

      // Return generated query
      return $query;
    }

  }
}
?>