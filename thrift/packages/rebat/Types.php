<?php
namespace rebat;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class QueryType {
  const WHERE = 0;
  const INTERSECT = 1;
  const UNION = 2;
  const NOT = 3;
  static public $__names = array(
    0 => 'WHERE',
    1 => 'INTERSECT',
    2 => 'UNION',
    3 => 'NOT',
  );
}

class Edge {
  static $_TSPEC;

  public $fromEntityId = null;
  public $fromEntityType = null;
  public $toEntityId = null;
  public $toEntityType = null;
  public $weight = 0;
  public $relationId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromEntityId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fromEntityType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'toEntityId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'toEntityType',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'weight',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'relationId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromEntityId'])) {
        $this->fromEntityId = $vals['fromEntityId'];
      }
      if (isset($vals['fromEntityType'])) {
        $this->fromEntityType = $vals['fromEntityType'];
      }
      if (isset($vals['toEntityId'])) {
        $this->toEntityId = $vals['toEntityId'];
      }
      if (isset($vals['toEntityType'])) {
        $this->toEntityType = $vals['toEntityType'];
      }
      if (isset($vals['weight'])) {
        $this->weight = $vals['weight'];
      }
      if (isset($vals['relationId'])) {
        $this->relationId = $vals['relationId'];
      }
    }
  }

  public function getName() {
    return 'Edge';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromEntityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromEntityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toEntityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toEntityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->weight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->relationId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Edge');
    if ($this->fromEntityId !== null) {
      $xfer += $output->writeFieldBegin('fromEntityId', TType::STRING, 1);
      $xfer += $output->writeString($this->fromEntityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromEntityType !== null) {
      $xfer += $output->writeFieldBegin('fromEntityType', TType::STRING, 2);
      $xfer += $output->writeString($this->fromEntityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toEntityId !== null) {
      $xfer += $output->writeFieldBegin('toEntityId', TType::STRING, 3);
      $xfer += $output->writeString($this->toEntityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toEntityType !== null) {
      $xfer += $output->writeFieldBegin('toEntityType', TType::STRING, 4);
      $xfer += $output->writeString($this->toEntityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weight !== null) {
      $xfer += $output->writeFieldBegin('weight', TType::I64, 5);
      $xfer += $output->writeI64($this->weight);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relationId !== null) {
      $xfer += $output->writeFieldBegin('relationId', TType::I64, 6);
      $xfer += $output->writeI64($this->relationId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Query {
  static $_TSPEC;

  public $edge = null;
  public $qtype =   0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'edge',
          'type' => TType::STRUCT,
          'class' => '\rebat\Edge',
          ),
        2 => array(
          'var' => 'qtype',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['edge'])) {
        $this->edge = $vals['edge'];
      }
      if (isset($vals['qtype'])) {
        $this->qtype = $vals['qtype'];
      }
    }
  }

  public function getName() {
    return 'Query';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->edge = new \rebat\Edge();
            $xfer += $this->edge->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->qtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Query');
    if ($this->edge !== null) {
      if (!is_object($this->edge)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('edge', TType::STRUCT, 1);
      $xfer += $this->edge->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qtype !== null) {
      $xfer += $output->writeFieldBegin('qtype', TType::I32, 2);
      $xfer += $output->writeI32($this->qtype);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


